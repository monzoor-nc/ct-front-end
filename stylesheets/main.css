@import url(http://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,700,900);
/* line 5, ../../../../../Ruby21/lib/ruby/gems/2.1.0/gems/compass-core-1.0.3/stylesheets/compass/reset/_utilities.scss */
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font: inherit;
  font-size: 100%;
  vertical-align: baseline;
}

/* line 22, ../../../../../Ruby21/lib/ruby/gems/2.1.0/gems/compass-core-1.0.3/stylesheets/compass/reset/_utilities.scss */
html {
  line-height: 1;
}

/* line 24, ../../../../../Ruby21/lib/ruby/gems/2.1.0/gems/compass-core-1.0.3/stylesheets/compass/reset/_utilities.scss */
ol, ul {
  list-style: none;
}

/* line 26, ../../../../../Ruby21/lib/ruby/gems/2.1.0/gems/compass-core-1.0.3/stylesheets/compass/reset/_utilities.scss */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* line 28, ../../../../../Ruby21/lib/ruby/gems/2.1.0/gems/compass-core-1.0.3/stylesheets/compass/reset/_utilities.scss */
caption, th, td {
  text-align: left;
  font-weight: normal;
  vertical-align: middle;
}

/* line 30, ../../../../../Ruby21/lib/ruby/gems/2.1.0/gems/compass-core-1.0.3/stylesheets/compass/reset/_utilities.scss */
q, blockquote {
  quotes: none;
}
/* line 103, ../../../../../Ruby21/lib/ruby/gems/2.1.0/gems/compass-core-1.0.3/stylesheets/compass/reset/_utilities.scss */
q:before, q:after, blockquote:before, blockquote:after {
  content: "";
  content: none;
}

/* line 32, ../../../../../Ruby21/lib/ruby/gems/2.1.0/gems/compass-core-1.0.3/stylesheets/compass/reset/_utilities.scss */
a img {
  border: none;
}

/* line 116, ../../../../../Ruby21/lib/ruby/gems/2.1.0/gems/compass-core-1.0.3/stylesheets/compass/reset/_utilities.scss */
article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {
  display: block;
}

/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
/* line 2, ../sass/common/_common.scss */
body {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-family: "Source Sans Pro", sans-serif;
  font-style: normal;
}

/* line 8, ../sass/common/_common.scss */
* a {
  text-decoration: none;
}

/* line 11, ../sass/common/_common.scss */
img {
  display: block;
}

/* line 17, ../sass/common/_common.scss */
.float--right {
  float: right;
}

/* line 18, ../sass/common/_common.scss */
.float--left {
  float: left;
}

/* line 19, ../sass/common/_common.scss */
.float--none {
  float: none;
}

/* line 9, ../sass/common/_extends.scss */
.header--container nav a {
  color: #FFFFFF;
}

/****************************************************************************/
/* line 38, ../sass/common/_extends.scss */
header {
  background-color: #0288d1;
}

/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/* line 15, ../sass/common/_header.scss */
header {
  display: block;
  clear: both;
  float: none;
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  height: 96px;
}
/* line 265, ../sass/vendor/jeet/_grid.scss */
header:first-child {
  margin-left: auto;
}
/* line 269, ../sass/vendor/jeet/_grid.scss */
header:last-child {
  margin-right: auto;
}

/* line 20, ../sass/common/_header.scss */
.header--container {
  height: 100%;
  *zoom: 1;
  width: auto;
  max-width: 940px;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
}
/* line 344, ../sass/vendor/jeet/_grid.scss */
.header--container:before, .header--container:after {
  content: '';
  display: table;
}
/* line 349, ../sass/vendor/jeet/_grid.scss */
.header--container:after {
  clear: both;
}
/* line 23, ../sass/common/_header.scss */
.header--container .nav__logo--container {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 100%;
  margin-left: 0%;
  margin-right: 0%;
  display: block;
  margin: 30px 0 0 0;
}
/* line 344, ../sass/vendor/jeet/_grid.scss */
.header--container .nav__logo--container:before, .header--container .nav__logo--container:after {
  content: '';
  display: table;
}
/* line 349, ../sass/vendor/jeet/_grid.scss */
.header--container .nav__logo--container:after {
  clear: both;
}
/* line 28, ../sass/common/_header.scss */
.header--container nav {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 100%;
  margin-left: 0%;
  margin-right: 0%;
  margin-top: 15px;
}
/* line 344, ../sass/vendor/jeet/_grid.scss */
.header--container nav:before, .header--container nav:after {
  content: '';
  display: table;
}
/* line 349, ../sass/vendor/jeet/_grid.scss */
.header--container nav:after {
  clear: both;
}
/* line 31, ../sass/common/_header.scss */
.header--container nav li {
  float: left;
  text-align: center;
  margin-right: 30px;
}
/* line 36, ../sass/common/_header.scss */
.header--container nav li:last-child {
  float: right;
  margin-right: 0;
}
/* line 41, ../sass/common/_header.scss */
.header--container nav li:first-child a {
  padding-left: 0;
}
/* line 46, ../sass/common/_header.scss */
.header--container nav a {
  padding: 0 12px 6px;
  display: block;
  -webkit-transition: all 0.2s;
  -moz-transition: all 0.2s;
  transition: all 0.2s;
}
/* line 51, ../sass/common/_header.scss */
.header--container nav a.selected {
  border-bottom: 2px solid #FFC107;
}
/* line 54, ../sass/common/_header.scss */
.header--container nav a:hover {
  color: rgba(255, 255, 255, 0.5);
}

@font-face {
  font-family: 'codecave';
  src: url("../fonts/codecave.eot?-5vxnnk");
  src: url("../fonts/codecave.eot?#iefix-5vxnnk") format("embedded-opentype"), url("../fonts/codecave.woff?-5vxnnk") format("woff"), url("../fonts/codecave.ttf?-5vxnnk") format("truetype"), url("../fonts/codecave.svg?-5vxnnk#codecave") format("svg");
  font-weight: normal;
  font-style: normal;
}
/* line 12, ../sass/common/_icon.scss */
[class^="codecave-"], [class*=" codecave-"] {
  font-family: 'codecave';
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* line 26, ../sass/common/_icon.scss */
.codecave-camera:before {
  content: "\e600";
}

/* line 30, ../sass/common/_icon.scss */
.codecave-briefcase:before {
  content: "\e601";
}

/* line 34, ../sass/common/_icon.scss */
.codecave-home:before {
  content: "\e602";
}

/* line 38, ../sass/common/_icon.scss */
.codecave-envelope:before {
  content: "\e603";
}

/* Sass Mixin that generates a Baseline Grid */
/* by: Mike Morrison, Soholaunch.com */
/* You don't have to leave this credit comment in, but it would be nice of you. */
/* line 30, ../sass/common/_local-settings.scss */
body {
  background-image: -webkit-linear-gradient(0deg, rgba(200, 0, 0, 0.2) 60px, transparent 20px), -webkit-linear-gradient(top, transparent 95%, #38ffff 100%);
  background-image: -moz-linear-gradient(0deg, rgba(200, 0, 0, 0.2) 60px, transparent 20px), -moz-linear-gradient(top, transparent 95%, #38ffff 100%);
  background-image: -o-linear-gradient(0deg, rgba(200, 0, 0, 0.2) 60px, transparent 20px), -o-linear-gradient(top, transparent 95%, #38ffff 100%);
  background-size: 80px 100%, 100% 16px;
  background-position: 10px 0px;
}

/* line 106, ../../../../../Ruby21/lib/ruby/gems/2.1.0/gems/compass-core-1.0.3/stylesheets/compass/typography/_vertical_rhythm.scss */
html {
  font-size: 87.5%;
  line-height: 1.71429em;
}

/* line 5, ../sass/common/_typography.scss */
h1 {
  font-size: 3em;
  line-height: 1.14286em;
}

/* line 8, ../sass/common/_typography.scss */
h2 {
  font-size: 2.14286em;
  line-height: 1.6em;
}

/* line 11, ../sass/common/_typography.scss */
h3 {
  font-size: 1.71429em;
  line-height: 2em;
}

/* line 14, ../sass/common/_typography.scss */
h4 {
  font-size: 1.5em;
  line-height: 2.28571em;
}

/* line 17, ../sass/common/_typography.scss */
h5 {
  font-size: 1.28571em;
  line-height: 1.33333em;
}

/* line 20, ../sass/common/_typography.scss */
h6 {
  font-size: 1.14286em;
  line-height: 1.5em;
}

/* line 23, ../sass/common/_typography.scss */
p {
  font-size: 1em;
  line-height: 1.71429em;
  margin-bottom: 1.71429em;
}

/* line 29, ../sass/common/_typography.scss */
.header--container nav li {
  font-size: 1em;
  line-height: 1.71429em;
}

/* line 30, ../sass/common/_typography.scss */
blockquote {
  font-size: 1.85714em;
  line-height: 1.84615em;
}

/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
